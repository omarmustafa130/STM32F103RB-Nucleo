
DMA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b8c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c98  08002c98  00003c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc4  08002cc4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc4  08002cc4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc4  08002cc4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc4  08002cc4  00003cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cc8  08002cc8  00003cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ccc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08002cd8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002cd8  00004164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000744f  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001667  00000000  00000000  0000b484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0000caf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000511  00000000  00000000  0000d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001684f  00000000  00000000  0000d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b39  00000000  00000000  00023ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000817a9  00000000  00000000  0002ca29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae1d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001994  00000000  00000000  000ae218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000afbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c80 	.word	0x08002c80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c80 	.word	0x08002c80

0800014c <main>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0


  HAL_Init();
 8000150:	f000 fb18 	bl	8000784 <HAL_Init>

  SystemClock_Config();
 8000154:	f000 f81c 	bl	8000190 <SystemClock_Config>


  MX_GPIO_Init();
 8000158:	f000 f8e8 	bl	800032c <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8ae 	bl	80002bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f858 	bl	8000214 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000164:	f000 f880 	bl	8000268 <MX_USART3_UART_Init>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8000168:	4b07      	ldr	r3, [pc, #28]	@ (8000188 <main+0x3c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	68da      	ldr	r2, [r3, #12]
 800016e:	4b06      	ldr	r3, [pc, #24]	@ (8000188 <main+0x3c>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	f042 0210 	orr.w	r2, r2, #16
 8000176:	60da      	str	r2, [r3, #12]

  HAL_UART_Receive_DMA(&huart3, (uint8_t *)UART3_rxBuffer, sizeof(UART3_rxBuffer));
 8000178:	2220      	movs	r2, #32
 800017a:	4904      	ldr	r1, [pc, #16]	@ (800018c <main+0x40>)
 800017c:	4802      	ldr	r0, [pc, #8]	@ (8000188 <main+0x3c>)
 800017e:	f001 fda1 	bl	8001cc4 <HAL_UART_Receive_DMA>

  while (1)
 8000182:	bf00      	nop
 8000184:	e7fd      	b.n	8000182 <main+0x36>
 8000186:	bf00      	nop
 8000188:	20000070 	.word	0x20000070
 800018c:	20000140 	.word	0x20000140

08000190 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	@ 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	@ 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f002 fd42 	bl	8002c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /* Initialize the RCC Oscillators according to the specified parameters */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;  // Use HSI as the oscillator
 80001b2:	2302      	movs	r3, #2
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;                    // Enable the HSI
 80001b6:	2301      	movs	r3, #1
 80001b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ba:	2310      	movs	r3, #16
 80001bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;                // Enable the PLL
 80001be:	2302      	movs	r3, #2
 80001c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;   // HSI divided by 2 (4 MHz)
 80001c2:	2300      	movs	r3, #0
 80001c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;               // Multiply by 16 to get 64 MHz
 80001c6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0318 	add.w	r3, r7, #24
 80001d0:	4618      	mov	r0, r3
 80001d2:	f001 f8a7 	bl	8001324 <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x50>
  {
    Error_Handler();                                          // Handle initialization error
 80001dc:	f000 f914 	bl	8000408 <Error_Handler>
  }

  /* Initialize the CPU, AHB, and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80001e0:	230f      	movs	r3, #15
 80001e2:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;   // Set PLL as system clock source
 80001e4:	2302      	movs	r3, #2
 80001e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;          // No division for AHB, runs at 64 MHz
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;           // APB1 clock (max 36 MHz) set to 32 MHz
 80001ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;           // APB2 clock runs at 64 MHz
 80001f2:	2300      	movs	r3, #0
 80001f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fb14 	bl	8001828 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x7a>
  {
    Error_Handler();                                          // Handle initialization error
 8000206:	f000 f8ff 	bl	8000408 <Error_Handler>
  }
}
 800020a:	bf00      	nop
 800020c:	3740      	adds	r7, #64	@ 0x40
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000218:	4b11      	ldr	r3, [pc, #68]	@ (8000260 <MX_USART2_UART_Init+0x4c>)
 800021a:	4a12      	ldr	r2, [pc, #72]	@ (8000264 <MX_USART2_UART_Init+0x50>)
 800021c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800021e:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <MX_USART2_UART_Init+0x4c>)
 8000220:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000226:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <MX_USART2_UART_Init+0x4c>)
 8000228:	2200      	movs	r2, #0
 800022a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800022c:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <MX_USART2_UART_Init+0x4c>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000232:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <MX_USART2_UART_Init+0x4c>)
 8000234:	2200      	movs	r2, #0
 8000236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000238:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <MX_USART2_UART_Init+0x4c>)
 800023a:	220c      	movs	r2, #12
 800023c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023e:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <MX_USART2_UART_Init+0x4c>)
 8000240:	2200      	movs	r2, #0
 8000242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000244:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <MX_USART2_UART_Init+0x4c>)
 8000246:	2200      	movs	r2, #0
 8000248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800024a:	4805      	ldr	r0, [pc, #20]	@ (8000260 <MX_USART2_UART_Init+0x4c>)
 800024c:	f001 fc7a 	bl	8001b44 <HAL_UART_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000256:	f000 f8d7 	bl	8000408 <Error_Handler>
  }

}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000028 	.word	0x20000028
 8000264:	40004400 	.word	0x40004400

08000268 <MX_USART3_UART_Init>:


static void MX_USART3_UART_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800026c:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <MX_USART3_UART_Init+0x4c>)
 800026e:	4a12      	ldr	r2, [pc, #72]	@ (80002b8 <MX_USART3_UART_Init+0x50>)
 8000270:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8000272:	4b10      	ldr	r3, [pc, #64]	@ (80002b4 <MX_USART3_UART_Init+0x4c>)
 8000274:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000278:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800027a:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <MX_USART3_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000280:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <MX_USART3_UART_Init+0x4c>)
 8000282:	2200      	movs	r2, #0
 8000284:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000286:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <MX_USART3_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800028c:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <MX_USART3_UART_Init+0x4c>)
 800028e:	220c      	movs	r2, #12
 8000290:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000292:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <MX_USART3_UART_Init+0x4c>)
 8000294:	2200      	movs	r2, #0
 8000296:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <MX_USART3_UART_Init+0x4c>)
 800029a:	2200      	movs	r2, #0
 800029c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800029e:	4805      	ldr	r0, [pc, #20]	@ (80002b4 <MX_USART3_UART_Init+0x4c>)
 80002a0:	f001 fc50 	bl	8001b44 <HAL_UART_Init>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002aa:	f000 f8ad 	bl	8000408 <Error_Handler>
  }

}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000070 	.word	0x20000070
 80002b8:	40004800 	.word	0x40004800

080002bc <MX_DMA_Init>:


static void MX_DMA_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002c2:	4b16      	ldr	r3, [pc, #88]	@ (800031c <MX_DMA_Init+0x60>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a15      	ldr	r2, [pc, #84]	@ (800031c <MX_DMA_Init+0x60>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6153      	str	r3, [r2, #20]
 80002ce:	4b13      	ldr	r3, [pc, #76]	@ (800031c <MX_DMA_Init+0x60>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]
  //hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2100      	movs	r1, #0
 80002de:	200c      	movs	r0, #12
 80002e0:	f000 fb89 	bl	80009f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80002e4:	200c      	movs	r0, #12
 80002e6:	f000 fba2 	bl	8000a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	200d      	movs	r0, #13
 80002f0:	f000 fb81 	bl	80009f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002f4:	200d      	movs	r0, #13
 80002f6:	f000 fb9a 	bl	8000a2e <HAL_NVIC_EnableIRQ>
  __HAL_LINKDMA(&huart3, hdmarx, hdma_usart3_rx);
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <MX_DMA_Init+0x64>)
 80002fc:	4a09      	ldr	r2, [pc, #36]	@ (8000324 <MX_DMA_Init+0x68>)
 80002fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000300:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <MX_DMA_Init+0x68>)
 8000302:	4a07      	ldr	r2, [pc, #28]	@ (8000320 <MX_DMA_Init+0x64>)
 8000304:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_LINKDMA(&huart3, hdmatx, hdma_usart3_tx);
 8000306:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <MX_DMA_Init+0x64>)
 8000308:	4a07      	ldr	r2, [pc, #28]	@ (8000328 <MX_DMA_Init+0x6c>)
 800030a:	639a      	str	r2, [r3, #56]	@ 0x38
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_DMA_Init+0x6c>)
 800030e:	4a04      	ldr	r2, [pc, #16]	@ (8000320 <MX_DMA_Init+0x64>)
 8000310:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000
 8000320:	20000070 	.word	0x20000070
 8000324:	200000b8 	.word	0x200000b8
 8000328:	200000fc 	.word	0x200000fc

0800032c <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000340:	4b2d      	ldr	r3, [pc, #180]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a2c      	ldr	r2, [pc, #176]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b2a      	ldr	r3, [pc, #168]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000358:	4b27      	ldr	r3, [pc, #156]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a26      	ldr	r2, [pc, #152]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b24      	ldr	r3, [pc, #144]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b21      	ldr	r3, [pc, #132]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a20      	ldr	r2, [pc, #128]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b1e      	ldr	r3, [pc, #120]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b1b      	ldr	r3, [pc, #108]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1a      	ldr	r2, [pc, #104]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b18      	ldr	r3, [pc, #96]	@ (80003f8 <MX_GPIO_Init+0xcc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2120      	movs	r1, #32
 80003a4:	4815      	ldr	r0, [pc, #84]	@ (80003fc <MX_GPIO_Init+0xd0>)
 80003a6:	f000 ff83 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003b0:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <MX_GPIO_Init+0xd4>)
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	4811      	ldr	r0, [pc, #68]	@ (8000404 <MX_GPIO_Init+0xd8>)
 80003c0:	f000 fdf2 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003c4:	2320      	movs	r3, #32
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	4619      	mov	r1, r3
 80003da:	4808      	ldr	r0, [pc, #32]	@ (80003fc <MX_GPIO_Init+0xd0>)
 80003dc:	f000 fde4 	bl	8000fa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2100      	movs	r1, #0
 80003e4:	2028      	movs	r0, #40	@ 0x28
 80003e6:	f000 fb06 	bl	80009f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ea:	2028      	movs	r0, #40	@ 0x28
 80003ec:	f000 fb1f 	bl	8000a2e <HAL_NVIC_EnableIRQ>


}
 80003f0:	bf00      	nop
 80003f2:	3720      	adds	r7, #32
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800
 8000400:	10110000 	.word	0x10110000
 8000404:	40011000 	.word	0x40011000

08000408 <Error_Handler>:


void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
  __disable_irq();
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <Error_Handler+0x8>

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <HAL_MspInit+0x5c>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a14      	ldr	r2, [pc, #80]	@ (8000470 <HAL_MspInit+0x5c>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <HAL_MspInit+0x5c>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <HAL_MspInit+0x5c>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	4a0e      	ldr	r2, [pc, #56]	@ (8000470 <HAL_MspInit+0x5c>)
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800043c:	61d3      	str	r3, [r2, #28]
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <HAL_MspInit+0x5c>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044a:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <HAL_MspInit+0x60>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	4a04      	ldr	r2, [pc, #16]	@ (8000474 <HAL_MspInit+0x60>)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000
 8000474:	40010000 	.word	0x40010000

08000478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	@ 0x28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0318 	add.w	r3, r7, #24
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a5c      	ldr	r2, [pc, #368]	@ (8000604 <HAL_UART_MspInit+0x18c>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d124      	bne.n	80004e2 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000498:	4b5b      	ldr	r3, [pc, #364]	@ (8000608 <HAL_UART_MspInit+0x190>)
 800049a:	69db      	ldr	r3, [r3, #28]
 800049c:	4a5a      	ldr	r2, [pc, #360]	@ (8000608 <HAL_UART_MspInit+0x190>)
 800049e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004a2:	61d3      	str	r3, [r2, #28]
 80004a4:	4b58      	ldr	r3, [pc, #352]	@ (8000608 <HAL_UART_MspInit+0x190>)
 80004a6:	69db      	ldr	r3, [r3, #28]
 80004a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b55      	ldr	r3, [pc, #340]	@ (8000608 <HAL_UART_MspInit+0x190>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a54      	ldr	r2, [pc, #336]	@ (8000608 <HAL_UART_MspInit+0x190>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b52      	ldr	r3, [pc, #328]	@ (8000608 <HAL_UART_MspInit+0x190>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	613b      	str	r3, [r7, #16]
 80004c6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004c8:	230c      	movs	r3, #12
 80004ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004cc:	2302      	movs	r3, #2
 80004ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	2302      	movs	r3, #2
 80004d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4619      	mov	r1, r3
 80004da:	484c      	ldr	r0, [pc, #304]	@ (800060c <HAL_UART_MspInit+0x194>)
 80004dc:	f000 fd64 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80004e0:	e08b      	b.n	80005fa <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a4a      	ldr	r2, [pc, #296]	@ (8000610 <HAL_UART_MspInit+0x198>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	f040 8086 	bne.w	80005fa <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 80004ee:	4b46      	ldr	r3, [pc, #280]	@ (8000608 <HAL_UART_MspInit+0x190>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a45      	ldr	r2, [pc, #276]	@ (8000608 <HAL_UART_MspInit+0x190>)
 80004f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b43      	ldr	r3, [pc, #268]	@ (8000608 <HAL_UART_MspInit+0x190>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b40      	ldr	r3, [pc, #256]	@ (8000608 <HAL_UART_MspInit+0x190>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a3f      	ldr	r2, [pc, #252]	@ (8000608 <HAL_UART_MspInit+0x190>)
 800050c:	f043 0308 	orr.w	r3, r3, #8
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b3d      	ldr	r3, [pc, #244]	@ (8000608 <HAL_UART_MspInit+0x190>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0308 	and.w	r3, r3, #8
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800051e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000524:	2302      	movs	r3, #2
 8000526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000528:	2303      	movs	r3, #3
 800052a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052c:	f107 0318 	add.w	r3, r7, #24
 8000530:	4619      	mov	r1, r3
 8000532:	4838      	ldr	r0, [pc, #224]	@ (8000614 <HAL_UART_MspInit+0x19c>)
 8000534:	f000 fd38 	bl	8000fa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000538:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800053c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	4619      	mov	r1, r3
 800054c:	4831      	ldr	r0, [pc, #196]	@ (8000614 <HAL_UART_MspInit+0x19c>)
 800054e:	f000 fd2b 	bl	8000fa8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000552:	4b31      	ldr	r3, [pc, #196]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 8000554:	4a31      	ldr	r2, [pc, #196]	@ (800061c <HAL_UART_MspInit+0x1a4>)
 8000556:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000558:	4b2f      	ldr	r3, [pc, #188]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800055e:	4b2e      	ldr	r3, [pc, #184]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000564:	4b2c      	ldr	r3, [pc, #176]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 8000566:	2280      	movs	r2, #128	@ 0x80
 8000568:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800056a:	4b2b      	ldr	r3, [pc, #172]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000570:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 8000572:	2200      	movs	r2, #0
 8000574:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000576:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800057c:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000582:	4825      	ldr	r0, [pc, #148]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 8000584:	f000 fa6e 	bl	8000a64 <HAL_DMA_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 800058e:	f7ff ff3b 	bl	8000408 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a20      	ldr	r2, [pc, #128]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 8000596:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000598:	4a1f      	ldr	r2, [pc, #124]	@ (8000618 <HAL_UART_MspInit+0x1a0>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800059e:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005a0:	4a20      	ldr	r2, [pc, #128]	@ (8000624 <HAL_UART_MspInit+0x1ac>)
 80005a2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005a6:	2210      	movs	r2, #16
 80005a8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005b2:	2280      	movs	r2, #128	@ 0x80
 80005b4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005bc:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80005c8:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80005ce:	4814      	ldr	r0, [pc, #80]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005d0:	f000 fa48 	bl	8000a64 <HAL_DMA_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <HAL_UART_MspInit+0x166>
      Error_Handler();
 80005da:	f7ff ff15 	bl	8000408 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80005e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <HAL_UART_MspInit+0x1a8>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	2027      	movs	r0, #39	@ 0x27
 80005f0:	f000 fa01 	bl	80009f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80005f4:	2027      	movs	r0, #39	@ 0x27
 80005f6:	f000 fa1a 	bl	8000a2e <HAL_NVIC_EnableIRQ>
}
 80005fa:	bf00      	nop
 80005fc:	3728      	adds	r7, #40	@ 0x28
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40004400 	.word	0x40004400
 8000608:	40021000 	.word	0x40021000
 800060c:	40010800 	.word	0x40010800
 8000610:	40004800 	.word	0x40004800
 8000614:	40010c00 	.word	0x40010c00
 8000618:	200000b8 	.word	0x200000b8
 800061c:	40020030 	.word	0x40020030
 8000620:	200000fc 	.word	0x200000fc
 8000624:	4002001c 	.word	0x4002001c

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <NMI_Handler+0x4>

08000630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <MemManage_Handler+0x4>

08000640 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <UsageFault_Handler+0x4>

08000650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000678:	f000 f8ca 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000684:	4802      	ldr	r0, [pc, #8]	@ (8000690 <DMA1_Channel2_IRQHandler+0x10>)
 8000686:	f000 fb5b 	bl	8000d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000fc 	.word	0x200000fc

08000694 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000698:	4802      	ldr	r0, [pc, #8]	@ (80006a4 <DMA1_Channel3_IRQHandler+0x10>)
 800069a:	f000 fb51 	bl	8000d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000b8 	.word	0x200000b8

080006a8 <USART3_IRQHandler>:
  */
/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
    // Handle UART interrupt
    HAL_UART_IRQHandler(&huart3);
 80006ae:	4818      	ldr	r0, [pc, #96]	@ (8000710 <USART3_IRQHandler+0x68>)
 80006b0:	f001 fbac 	bl	8001e0c <HAL_UART_IRQHandler>

    // Check if the IDLE flag is set (data reception is finished)
    if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE)) {
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <USART3_IRQHandler+0x68>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	2b10      	cmp	r3, #16
 80006c0:	d122      	bne.n	8000708 <USART3_IRQHandler+0x60>
        __HAL_UART_CLEAR_IDLEFLAG(&huart3);  // Clear the IDLE flag
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <USART3_IRQHandler+0x68>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <USART3_IRQHandler+0x68>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

        // Disable DMA to stop reception
        HAL_UART_DMAStop(&huart3);
 80006d8:	480d      	ldr	r0, [pc, #52]	@ (8000710 <USART3_IRQHandler+0x68>)
 80006da:	f001 fb18 	bl	8001d0e <HAL_UART_DMAStop>

        // Get the number of received bytes
        uint16_t bytes_received = sizeof(UART3_rxBuffer) - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 80006de:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <USART3_IRQHandler+0x6c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	f1c3 0320 	rsb	r3, r3, #32
 80006ea:	80fb      	strh	r3, [r7, #6]

        // If data is received, send it back
        if (bytes_received > 0) {
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d005      	beq.n	80006fe <USART3_IRQHandler+0x56>
            HAL_UART_Transmit_DMA(&huart3, (uint8_t*)UART3_rxBuffer, bytes_received);
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	@ (8000718 <USART3_IRQHandler+0x70>)
 80006f8:	4805      	ldr	r0, [pc, #20]	@ (8000710 <USART3_IRQHandler+0x68>)
 80006fa:	f001 fa73 	bl	8001be4 <HAL_UART_Transmit_DMA>
        }

        // Restart DMA reception
        HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_rxBuffer, sizeof(UART3_rxBuffer));
 80006fe:	2220      	movs	r2, #32
 8000700:	4905      	ldr	r1, [pc, #20]	@ (8000718 <USART3_IRQHandler+0x70>)
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <USART3_IRQHandler+0x68>)
 8000704:	f001 fade 	bl	8001cc4 <HAL_UART_Receive_DMA>
    }
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000070 	.word	0x20000070
 8000714:	200000b8 	.word	0x200000b8
 8000718:	20000140 	.word	0x20000140

0800071c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000720:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000724:	f000 fddc 	bl	80012e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000738:	f7ff fff8 	bl	800072c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480b      	ldr	r0, [pc, #44]	@ (800076c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800073e:	490c      	ldr	r1, [pc, #48]	@ (8000770 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000740:	4a0c      	ldr	r2, [pc, #48]	@ (8000774 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a09      	ldr	r2, [pc, #36]	@ (8000778 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000754:	4c09      	ldr	r4, [pc, #36]	@ (800077c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000762:	f002 fa69 	bl	8002c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fcf1 	bl	800014c <main>
  bx lr
 800076a:	4770      	bx	lr
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000774:	08002ccc 	.word	0x08002ccc
  ldr r2, =_sbss
 8000778:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800077c:	20000164 	.word	0x20000164

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	@ (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f923 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f808 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff fe38 	bl	8000414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <HAL_InitTick+0x54>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <HAL_InitTick+0x58>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f93b 	bl	8000a4a <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00e      	b.n	80007fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d80a      	bhi.n	80007fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f000 f903 	bl	80009f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4a06      	ldr	r2, [pc, #24]	@ (800080c <HAL_InitTick+0x5c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000000 	.word	0x20000000
 8000808:	20000008 	.word	0x20000008
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <HAL_IncTick+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <HAL_IncTick+0x20>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a03      	ldr	r2, [pc, #12]	@ (8000830 <HAL_IncTick+0x20>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000008 	.word	0x20000008
 8000830:	20000160 	.word	0x20000160

08000834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b02      	ldr	r3, [pc, #8]	@ (8000844 <HAL_GetTick+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000160 	.word	0x20000160

08000848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087a:	4a04      	ldr	r2, [pc, #16]	@ (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	60d3      	str	r3, [r2, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000894:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	f003 0307 	and.w	r3, r3, #7
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db0b      	blt.n	80008d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 021f 	and.w	r2, r3, #31
 80008c4:	4906      	ldr	r1, [pc, #24]	@ (80008e0 <__NVIC_EnableIRQ+0x34>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	095b      	lsrs	r3, r3, #5
 80008cc:	2001      	movs	r0, #1
 80008ce:	fa00 f202 	lsl.w	r2, r0, r2
 80008d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	@ (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	@ (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	@ 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	@ 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009ac:	d301      	bcc.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00f      	b.n	80009d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <SysTick_Config+0x40>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	210f      	movs	r1, #15
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f7ff ff90 	bl	80008e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <SysTick_Config+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <SysTick_Config+0x40>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff2d 	bl	8000848 <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff42 	bl	8000890 <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ff90 	bl	8000938 <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff5f 	bl	80008e4 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff35 	bl	80008ac <__NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffa2 	bl	800099c <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e043      	b.n	8000b02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <HAL_DMA_Init+0xa8>)
 8000a82:	4413      	add	r3, r2
 8000a84:	4a22      	ldr	r2, [pc, #136]	@ (8000b10 <HAL_DMA_Init+0xac>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	091b      	lsrs	r3, r3, #4
 8000a8c:	009a      	lsls	r2, r3, #2
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <HAL_DMA_Init+0xb0>)
 8000a96:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000aae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ab2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	bffdfff8 	.word	0xbffdfff8
 8000b10:	cccccccd 	.word	0xcccccccd
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d101      	bne.n	8000b38 <HAL_DMA_Start_IT+0x20>
 8000b34:	2302      	movs	r3, #2
 8000b36:	e04b      	b.n	8000bd0 <HAL_DMA_Start_IT+0xb8>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d13a      	bne.n	8000bc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2202      	movs	r2, #2
 8000b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2200      	movs	r2, #0
 8000b58:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0201 	bic.w	r2, r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f000 f9eb 	bl	8000f4c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d008      	beq.n	8000b90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f042 020e 	orr.w	r2, r2, #14
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	e00f      	b.n	8000bb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0204 	bic.w	r2, r2, #4
 8000b9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f042 020a 	orr.w	r2, r2, #10
 8000bae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 0201 	orr.w	r2, r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	e005      	b.n	8000bce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d008      	beq.n	8000c02 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e020      	b.n	8000c44 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 020e 	bic.w	r2, r2, #14
 8000c10:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0201 	bic.w	r2, r2, #1
 8000c20:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d005      	beq.n	8000c74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e051      	b.n	8000d18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f022 020e 	bic.w	r2, r2, #14
 8000c82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0201 	bic.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a22      	ldr	r2, [pc, #136]	@ (8000d24 <HAL_DMA_Abort_IT+0xd4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d029      	beq.n	8000cf2 <HAL_DMA_Abort_IT+0xa2>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a21      	ldr	r2, [pc, #132]	@ (8000d28 <HAL_DMA_Abort_IT+0xd8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d022      	beq.n	8000cee <HAL_DMA_Abort_IT+0x9e>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1f      	ldr	r2, [pc, #124]	@ (8000d2c <HAL_DMA_Abort_IT+0xdc>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d01a      	beq.n	8000ce8 <HAL_DMA_Abort_IT+0x98>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d30 <HAL_DMA_Abort_IT+0xe0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d012      	beq.n	8000ce2 <HAL_DMA_Abort_IT+0x92>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d34 <HAL_DMA_Abort_IT+0xe4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d00a      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x8c>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1b      	ldr	r2, [pc, #108]	@ (8000d38 <HAL_DMA_Abort_IT+0xe8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d102      	bne.n	8000cd6 <HAL_DMA_Abort_IT+0x86>
 8000cd0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000cd4:	e00e      	b.n	8000cf4 <HAL_DMA_Abort_IT+0xa4>
 8000cd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cda:	e00b      	b.n	8000cf4 <HAL_DMA_Abort_IT+0xa4>
 8000cdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ce0:	e008      	b.n	8000cf4 <HAL_DMA_Abort_IT+0xa4>
 8000ce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce6:	e005      	b.n	8000cf4 <HAL_DMA_Abort_IT+0xa4>
 8000ce8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cec:	e002      	b.n	8000cf4 <HAL_DMA_Abort_IT+0xa4>
 8000cee:	2310      	movs	r3, #16
 8000cf0:	e000      	b.n	8000cf4 <HAL_DMA_Abort_IT+0xa4>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	4a11      	ldr	r2, [pc, #68]	@ (8000d3c <HAL_DMA_Abort_IT+0xec>)
 8000cf6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	4798      	blx	r3
    } 
  }
  return status;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40020008 	.word	0x40020008
 8000d28:	4002001c 	.word	0x4002001c
 8000d2c:	40020030 	.word	0x40020030
 8000d30:	40020044 	.word	0x40020044
 8000d34:	40020058 	.word	0x40020058
 8000d38:	4002006c 	.word	0x4002006c
 8000d3c:	40020000 	.word	0x40020000

08000d40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d04f      	beq.n	8000e08 <HAL_DMA_IRQHandler+0xc8>
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d04a      	beq.n	8000e08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0320 	and.w	r3, r3, #32
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d107      	bne.n	8000d90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0204 	bic.w	r2, r2, #4
 8000d8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a66      	ldr	r2, [pc, #408]	@ (8000f30 <HAL_DMA_IRQHandler+0x1f0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d029      	beq.n	8000dee <HAL_DMA_IRQHandler+0xae>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a65      	ldr	r2, [pc, #404]	@ (8000f34 <HAL_DMA_IRQHandler+0x1f4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d022      	beq.n	8000dea <HAL_DMA_IRQHandler+0xaa>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a63      	ldr	r2, [pc, #396]	@ (8000f38 <HAL_DMA_IRQHandler+0x1f8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d01a      	beq.n	8000de4 <HAL_DMA_IRQHandler+0xa4>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a62      	ldr	r2, [pc, #392]	@ (8000f3c <HAL_DMA_IRQHandler+0x1fc>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d012      	beq.n	8000dde <HAL_DMA_IRQHandler+0x9e>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a60      	ldr	r2, [pc, #384]	@ (8000f40 <HAL_DMA_IRQHandler+0x200>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d00a      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x98>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8000f44 <HAL_DMA_IRQHandler+0x204>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d102      	bne.n	8000dd2 <HAL_DMA_IRQHandler+0x92>
 8000dcc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dd0:	e00e      	b.n	8000df0 <HAL_DMA_IRQHandler+0xb0>
 8000dd2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000dd6:	e00b      	b.n	8000df0 <HAL_DMA_IRQHandler+0xb0>
 8000dd8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000ddc:	e008      	b.n	8000df0 <HAL_DMA_IRQHandler+0xb0>
 8000dde:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000de2:	e005      	b.n	8000df0 <HAL_DMA_IRQHandler+0xb0>
 8000de4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de8:	e002      	b.n	8000df0 <HAL_DMA_IRQHandler+0xb0>
 8000dea:	2340      	movs	r3, #64	@ 0x40
 8000dec:	e000      	b.n	8000df0 <HAL_DMA_IRQHandler+0xb0>
 8000dee:	2304      	movs	r3, #4
 8000df0:	4a55      	ldr	r2, [pc, #340]	@ (8000f48 <HAL_DMA_IRQHandler+0x208>)
 8000df2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 8094 	beq.w	8000f26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e06:	e08e      	b.n	8000f26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d056      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0x186>
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d051      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10b      	bne.n	8000e48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 020a 	bic.w	r2, r2, #10
 8000e3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a38      	ldr	r2, [pc, #224]	@ (8000f30 <HAL_DMA_IRQHandler+0x1f0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d029      	beq.n	8000ea6 <HAL_DMA_IRQHandler+0x166>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a37      	ldr	r2, [pc, #220]	@ (8000f34 <HAL_DMA_IRQHandler+0x1f4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d022      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0x162>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a35      	ldr	r2, [pc, #212]	@ (8000f38 <HAL_DMA_IRQHandler+0x1f8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d01a      	beq.n	8000e9c <HAL_DMA_IRQHandler+0x15c>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a34      	ldr	r2, [pc, #208]	@ (8000f3c <HAL_DMA_IRQHandler+0x1fc>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d012      	beq.n	8000e96 <HAL_DMA_IRQHandler+0x156>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a32      	ldr	r2, [pc, #200]	@ (8000f40 <HAL_DMA_IRQHandler+0x200>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00a      	beq.n	8000e90 <HAL_DMA_IRQHandler+0x150>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a31      	ldr	r2, [pc, #196]	@ (8000f44 <HAL_DMA_IRQHandler+0x204>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d102      	bne.n	8000e8a <HAL_DMA_IRQHandler+0x14a>
 8000e84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e88:	e00e      	b.n	8000ea8 <HAL_DMA_IRQHandler+0x168>
 8000e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e8e:	e00b      	b.n	8000ea8 <HAL_DMA_IRQHandler+0x168>
 8000e90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e94:	e008      	b.n	8000ea8 <HAL_DMA_IRQHandler+0x168>
 8000e96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e9a:	e005      	b.n	8000ea8 <HAL_DMA_IRQHandler+0x168>
 8000e9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ea0:	e002      	b.n	8000ea8 <HAL_DMA_IRQHandler+0x168>
 8000ea2:	2320      	movs	r3, #32
 8000ea4:	e000      	b.n	8000ea8 <HAL_DMA_IRQHandler+0x168>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	4a27      	ldr	r2, [pc, #156]	@ (8000f48 <HAL_DMA_IRQHandler+0x208>)
 8000eaa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d034      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ec4:	e02f      	b.n	8000f26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	2208      	movs	r2, #8
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d028      	beq.n	8000f28 <HAL_DMA_IRQHandler+0x1e8>
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d023      	beq.n	8000f28 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 020e 	bic.w	r2, r2, #14
 8000eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ef8:	2101      	movs	r1, #1
 8000efa:	fa01 f202 	lsl.w	r2, r1, r2
 8000efe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d004      	beq.n	8000f28 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	4798      	blx	r3
    }
  }
  return;
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
}
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020008 	.word	0x40020008
 8000f34:	4002001c 	.word	0x4002001c
 8000f38:	40020030 	.word	0x40020030
 8000f3c:	40020044 	.word	0x40020044
 8000f40:	40020058 	.word	0x40020058
 8000f44:	4002006c 	.word	0x4002006c
 8000f48:	40020000 	.word	0x40020000

08000f4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f62:	2101      	movs	r1, #1
 8000f64:	fa01 f202 	lsl.w	r2, r1, r2
 8000f68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b10      	cmp	r3, #16
 8000f78:	d108      	bne.n	8000f8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f8a:	e007      	b.n	8000f9c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	60da      	str	r2, [r3, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b08b      	sub	sp, #44	@ 0x2c
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e169      	b.n	8001290 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 8158 	bne.w	800128a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4a9a      	ldr	r2, [pc, #616]	@ (8001248 <HAL_GPIO_Init+0x2a0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d05e      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8000fe4:	4a98      	ldr	r2, [pc, #608]	@ (8001248 <HAL_GPIO_Init+0x2a0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d875      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8000fea:	4a98      	ldr	r2, [pc, #608]	@ (800124c <HAL_GPIO_Init+0x2a4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d058      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8000ff0:	4a96      	ldr	r2, [pc, #600]	@ (800124c <HAL_GPIO_Init+0x2a4>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d86f      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8000ff6:	4a96      	ldr	r2, [pc, #600]	@ (8001250 <HAL_GPIO_Init+0x2a8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d052      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8000ffc:	4a94      	ldr	r2, [pc, #592]	@ (8001250 <HAL_GPIO_Init+0x2a8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d869      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8001002:	4a94      	ldr	r2, [pc, #592]	@ (8001254 <HAL_GPIO_Init+0x2ac>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d04c      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8001008:	4a92      	ldr	r2, [pc, #584]	@ (8001254 <HAL_GPIO_Init+0x2ac>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d863      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 800100e:	4a92      	ldr	r2, [pc, #584]	@ (8001258 <HAL_GPIO_Init+0x2b0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d046      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
 8001014:	4a90      	ldr	r2, [pc, #576]	@ (8001258 <HAL_GPIO_Init+0x2b0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d85d      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 800101a:	2b12      	cmp	r3, #18
 800101c:	d82a      	bhi.n	8001074 <HAL_GPIO_Init+0xcc>
 800101e:	2b12      	cmp	r3, #18
 8001020:	d859      	bhi.n	80010d6 <HAL_GPIO_Init+0x12e>
 8001022:	a201      	add	r2, pc, #4	@ (adr r2, 8001028 <HAL_GPIO_Init+0x80>)
 8001024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001028:	080010a3 	.word	0x080010a3
 800102c:	0800107d 	.word	0x0800107d
 8001030:	0800108f 	.word	0x0800108f
 8001034:	080010d1 	.word	0x080010d1
 8001038:	080010d7 	.word	0x080010d7
 800103c:	080010d7 	.word	0x080010d7
 8001040:	080010d7 	.word	0x080010d7
 8001044:	080010d7 	.word	0x080010d7
 8001048:	080010d7 	.word	0x080010d7
 800104c:	080010d7 	.word	0x080010d7
 8001050:	080010d7 	.word	0x080010d7
 8001054:	080010d7 	.word	0x080010d7
 8001058:	080010d7 	.word	0x080010d7
 800105c:	080010d7 	.word	0x080010d7
 8001060:	080010d7 	.word	0x080010d7
 8001064:	080010d7 	.word	0x080010d7
 8001068:	080010d7 	.word	0x080010d7
 800106c:	08001085 	.word	0x08001085
 8001070:	08001099 	.word	0x08001099
 8001074:	4a79      	ldr	r2, [pc, #484]	@ (800125c <HAL_GPIO_Init+0x2b4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800107a:	e02c      	b.n	80010d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	623b      	str	r3, [r7, #32]
          break;
 8001082:	e029      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	3304      	adds	r3, #4
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e024      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	3308      	adds	r3, #8
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e01f      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	330c      	adds	r3, #12
 800109e:	623b      	str	r3, [r7, #32]
          break;
 80010a0:	e01a      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010aa:	2304      	movs	r3, #4
 80010ac:	623b      	str	r3, [r7, #32]
          break;
 80010ae:	e013      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d105      	bne.n	80010c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b8:	2308      	movs	r3, #8
 80010ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	611a      	str	r2, [r3, #16]
          break;
 80010c2:	e009      	b.n	80010d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c4:	2308      	movs	r3, #8
 80010c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	615a      	str	r2, [r3, #20]
          break;
 80010ce:	e003      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x130>
          break;
 80010d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2bff      	cmp	r3, #255	@ 0xff
 80010dc:	d801      	bhi.n	80010e2 <HAL_GPIO_Init+0x13a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	e001      	b.n	80010e6 <HAL_GPIO_Init+0x13e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3304      	adds	r3, #4
 80010e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2bff      	cmp	r3, #255	@ 0xff
 80010ec:	d802      	bhi.n	80010f4 <HAL_GPIO_Init+0x14c>
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	e002      	b.n	80010fa <HAL_GPIO_Init+0x152>
 80010f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f6:	3b08      	subs	r3, #8
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	210f      	movs	r1, #15
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	401a      	ands	r2, r3
 800110c:	6a39      	ldr	r1, [r7, #32]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	431a      	orrs	r2, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80b1 	beq.w	800128a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001128:	4b4d      	ldr	r3, [pc, #308]	@ (8001260 <HAL_GPIO_Init+0x2b8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a4c      	ldr	r2, [pc, #304]	@ (8001260 <HAL_GPIO_Init+0x2b8>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b4a      	ldr	r3, [pc, #296]	@ (8001260 <HAL_GPIO_Init+0x2b8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001140:	4a48      	ldr	r2, [pc, #288]	@ (8001264 <HAL_GPIO_Init+0x2bc>)
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a40      	ldr	r2, [pc, #256]	@ (8001268 <HAL_GPIO_Init+0x2c0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d013      	beq.n	8001194 <HAL_GPIO_Init+0x1ec>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a3f      	ldr	r2, [pc, #252]	@ (800126c <HAL_GPIO_Init+0x2c4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d00d      	beq.n	8001190 <HAL_GPIO_Init+0x1e8>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a3e      	ldr	r2, [pc, #248]	@ (8001270 <HAL_GPIO_Init+0x2c8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x1e4>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a3d      	ldr	r2, [pc, #244]	@ (8001274 <HAL_GPIO_Init+0x2cc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d101      	bne.n	8001188 <HAL_GPIO_Init+0x1e0>
 8001184:	2303      	movs	r3, #3
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001188:	2304      	movs	r3, #4
 800118a:	e004      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 800118c:	2302      	movs	r3, #2
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001194:	2300      	movs	r3, #0
 8001196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001198:	f002 0203 	and.w	r2, r2, #3
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	4093      	lsls	r3, r2
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011a6:	492f      	ldr	r1, [pc, #188]	@ (8001264 <HAL_GPIO_Init+0x2bc>)
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	492c      	ldr	r1, [pc, #176]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	608b      	str	r3, [r1, #8]
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4928      	ldr	r1, [pc, #160]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011d8:	4013      	ands	r3, r2
 80011da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011e8:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	4922      	ldr	r1, [pc, #136]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	60cb      	str	r3, [r1, #12]
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	491e      	ldr	r1, [pc, #120]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 8001200:	4013      	ands	r3, r2
 8001202:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001210:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4918      	ldr	r1, [pc, #96]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800121e:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	43db      	mvns	r3, r3
 8001226:	4914      	ldr	r1, [pc, #80]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 8001228:	4013      	ands	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d021      	beq.n	800127c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	490e      	ldr	r1, [pc, #56]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
 8001244:	e021      	b.n	800128a <HAL_GPIO_Init+0x2e2>
 8001246:	bf00      	nop
 8001248:	10320000 	.word	0x10320000
 800124c:	10310000 	.word	0x10310000
 8001250:	10220000 	.word	0x10220000
 8001254:	10210000 	.word	0x10210000
 8001258:	10120000 	.word	0x10120000
 800125c:	10110000 	.word	0x10110000
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000
 8001268:	40010800 	.word	0x40010800
 800126c:	40010c00 	.word	0x40010c00
 8001270:	40011000 	.word	0x40011000
 8001274:	40011400 	.word	0x40011400
 8001278:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_GPIO_Init+0x304>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	43db      	mvns	r3, r3
 8001284:	4909      	ldr	r1, [pc, #36]	@ (80012ac <HAL_GPIO_Init+0x304>)
 8001286:	4013      	ands	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	3301      	adds	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	fa22 f303 	lsr.w	r3, r2, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	f47f ae8e 	bne.w	8000fbc <HAL_GPIO_Init+0x14>
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	372c      	adds	r7, #44	@ 0x2c
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	40010400 	.word	0x40010400

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	611a      	str	r2, [r3, #16]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012f6:	4a05      	ldr	r2, [pc, #20]	@ (800130c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f806 	bl	8001310 <HAL_GPIO_EXTI_Callback>
  }
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e272      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8087 	beq.w	8001452 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001344:	4b92      	ldr	r3, [pc, #584]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b04      	cmp	r3, #4
 800134e:	d00c      	beq.n	800136a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001350:	4b8f      	ldr	r3, [pc, #572]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	d112      	bne.n	8001382 <HAL_RCC_OscConfig+0x5e>
 800135c:	4b8c      	ldr	r3, [pc, #560]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001368:	d10b      	bne.n	8001382 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	4b89      	ldr	r3, [pc, #548]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d06c      	beq.n	8001450 <HAL_RCC_OscConfig+0x12c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d168      	bne.n	8001450 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e24c      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x76>
 800138c:	4b80      	ldr	r3, [pc, #512]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a7f      	ldr	r2, [pc, #508]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e02e      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x98>
 80013a2:	4b7b      	ldr	r3, [pc, #492]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7a      	ldr	r2, [pc, #488]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b78      	ldr	r3, [pc, #480]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a77      	ldr	r2, [pc, #476]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0xbc>
 80013c6:	4b72      	ldr	r3, [pc, #456]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a71      	ldr	r2, [pc, #452]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 80013e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b68      	ldr	r3, [pc, #416]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a67      	ldr	r2, [pc, #412]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fa18 	bl	8000834 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fa14 	bl	8000834 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	@ 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e200      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b5d      	ldr	r3, [pc, #372]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xe4>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fa04 	bl	8000834 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fa00 	bl	8000834 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	@ 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e1ec      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x10c>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d063      	beq.n	8001526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b4c      	ldr	r3, [pc, #304]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800146a:	4b49      	ldr	r3, [pc, #292]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d11c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x18c>
 8001476:	4b46      	ldr	r3, [pc, #280]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x176>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1c0      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4939      	ldr	r1, [pc, #228]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	e03a      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b36      	ldr	r3, [pc, #216]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff f9b9 	bl	8000834 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff f9b5 	bl	8000834 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e1a1      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4927      	ldr	r1, [pc, #156]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
 80014f8:	e015      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fa:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff f998 	bl	8000834 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff f994 	bl	8000834 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e180      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d03a      	beq.n	80015a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d019      	beq.n	800156e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <HAL_RCC_OscConfig+0x274>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff f978 	bl	8000834 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff f974 	bl	8000834 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e160      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f000 face 	bl	8001b08 <RCC_Delay>
 800156c:	e01c      	b.n	80015a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_RCC_OscConfig+0x274>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff f95e 	bl	8000834 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157a:	e00f      	b.n	800159c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff f95a 	bl	8000834 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d908      	bls.n	800159c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e146      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	42420000 	.word	0x42420000
 8001598:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	4b92      	ldr	r3, [pc, #584]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e9      	bne.n	800157c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a6 	beq.w	8001702 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ba:	4b8b      	ldr	r3, [pc, #556]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10d      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b88      	ldr	r3, [pc, #544]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a87      	ldr	r2, [pc, #540]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b85      	ldr	r3, [pc, #532]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b82      	ldr	r3, [pc, #520]	@ (80017ec <HAL_RCC_OscConfig+0x4c8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b7f      	ldr	r3, [pc, #508]	@ (80017ec <HAL_RCC_OscConfig+0x4c8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a7e      	ldr	r2, [pc, #504]	@ (80017ec <HAL_RCC_OscConfig+0x4c8>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff f91b 	bl	8000834 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff f917 	bl	8000834 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b64      	cmp	r3, #100	@ 0x64
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e103      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b75      	ldr	r3, [pc, #468]	@ (80017ec <HAL_RCC_OscConfig+0x4c8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x312>
 8001628:	4b6f      	ldr	r3, [pc, #444]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a6e      	ldr	r2, [pc, #440]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e02d      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x334>
 800163e:	4b6a      	ldr	r3, [pc, #424]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a69      	ldr	r2, [pc, #420]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	4b67      	ldr	r3, [pc, #412]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a66      	ldr	r2, [pc, #408]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	e01c      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0x356>
 8001660:	4b61      	ldr	r3, [pc, #388]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a60      	ldr	r2, [pc, #384]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	4b5e      	ldr	r3, [pc, #376]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a5d      	ldr	r2, [pc, #372]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	e00b      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 800167a:	4b5b      	ldr	r3, [pc, #364]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a5a      	ldr	r2, [pc, #360]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4b58      	ldr	r3, [pc, #352]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a57      	ldr	r2, [pc, #348]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d015      	beq.n	80016c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff f8cb 	bl	8000834 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff f8c7 	bl	8000834 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0b1      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	4b4b      	ldr	r3, [pc, #300]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ee      	beq.n	80016a2 <HAL_RCC_OscConfig+0x37e>
 80016c4:	e014      	b.n	80016f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff f8b5 	bl	8000834 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff f8b1 	bl	8000834 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e09b      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	4b40      	ldr	r3, [pc, #256]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ee      	bne.n	80016ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d105      	bne.n	8001702 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f6:	4b3c      	ldr	r3, [pc, #240]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a3b      	ldr	r2, [pc, #236]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170c:	4b36      	ldr	r3, [pc, #216]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d061      	beq.n	80017dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d146      	bne.n	80017ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	4b33      	ldr	r3, [pc, #204]	@ (80017f0 <HAL_RCC_OscConfig+0x4cc>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff f885 	bl	8000834 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff f881 	bl	8000834 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e06d      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	4b29      	ldr	r3, [pc, #164]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001754:	d108      	bne.n	8001768 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001756:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	4921      	ldr	r1, [pc, #132]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a19      	ldr	r1, [r3, #32]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	430b      	orrs	r3, r1
 800177a:	491b      	ldr	r1, [pc, #108]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <HAL_RCC_OscConfig+0x4cc>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff f855 	bl	8000834 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff f851 	bl	8000834 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e03d      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x46a>
 80017ac:	e035      	b.n	800181a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <HAL_RCC_OscConfig+0x4cc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff f83e 	bl	8000834 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff f83a 	bl	8000834 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e026      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x498>
 80017da:	e01e      	b.n	800181a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e019      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40007000 	.word	0x40007000
 80017f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_RCC_OscConfig+0x500>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	429a      	cmp	r2, r3
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0d0      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b6a      	ldr	r3, [pc, #424]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d910      	bls.n	800186c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b67      	ldr	r3, [pc, #412]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0207 	bic.w	r2, r3, #7
 8001852:	4965      	ldr	r1, [pc, #404]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b63      	ldr	r3, [pc, #396]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0b8      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001884:	4b59      	ldr	r3, [pc, #356]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a58      	ldr	r2, [pc, #352]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800188e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800189c:	4b53      	ldr	r3, [pc, #332]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a52      	ldr	r2, [pc, #328]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b50      	ldr	r3, [pc, #320]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	494d      	ldr	r1, [pc, #308]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d040      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b47      	ldr	r3, [pc, #284]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d115      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e07f      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b41      	ldr	r3, [pc, #260]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e073      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3d      	ldr	r3, [pc, #244]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e06b      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b39      	ldr	r3, [pc, #228]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4936      	ldr	r1, [pc, #216]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7fe ff8c 	bl	8000834 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7fe ff88 	bl	8000834 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e053      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d210      	bcs.n	8001978 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0207 	bic.w	r2, r3, #7
 800195e:	4922      	ldr	r1, [pc, #136]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e032      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4916      	ldr	r1, [pc, #88]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	490e      	ldr	r1, [pc, #56]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b6:	f000 f821 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	490a      	ldr	r1, [pc, #40]	@ (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	5ccb      	ldrb	r3, [r1, r3]
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <HAL_RCC_ClockConfig+0x1cc>)
 80019d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_ClockConfig+0x1d0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe feea 	bl	80007b0 <HAL_InitTick>

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	08002c98 	.word	0x08002c98
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x30>
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x36>
 8001a2a:	e027      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2e:	613b      	str	r3, [r7, #16]
      break;
 8001a30:	e027      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	0c9b      	lsrs	r3, r3, #18
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	4a17      	ldr	r2, [pc, #92]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a3c:	5cd3      	ldrb	r3, [r2, r3]
 8001a3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d010      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a4a:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0c5b      	lsrs	r3, r3, #17
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a5e:	fb03 f202 	mul.w	r2, r3, r2
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e004      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	613b      	str	r3, [r7, #16]
      break;
 8001a7a:	e002      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a7e:	613b      	str	r3, [r7, #16]
      break;
 8001a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a82:	693b      	ldr	r3, [r7, #16]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	007a1200 	.word	0x007a1200
 8001a98:	08002cb0 	.word	0x08002cb0
 8001a9c:	08002cc0 	.word	0x08002cc0
 8001aa0:	003d0900 	.word	0x003d0900

08001aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa8:	4b02      	ldr	r3, [pc, #8]	@ (8001ab4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000000 	.word	0x20000000

08001ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001abc:	f7ff fff2 	bl	8001aa4 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4903      	ldr	r1, [pc, #12]	@ (8001adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	08002ca8 	.word	0x08002ca8

08001ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	0adb      	lsrs	r3, r3, #11
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4903      	ldr	r1, [pc, #12]	@ (8001b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08002ca8 	.word	0x08002ca8

08001b08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b10:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <RCC_Delay+0x34>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <RCC_Delay+0x38>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	0a5b      	lsrs	r3, r3, #9
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b24:	bf00      	nop
  }
  while (Delay --);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1e5a      	subs	r2, r3, #1
 8001b2a:	60fa      	str	r2, [r7, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f9      	bne.n	8001b24 <RCC_Delay+0x1c>
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	10624dd3 	.word	0x10624dd3

08001b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e042      	b.n	8001bdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7fe fc84 	bl	8000478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2224      	movs	r2, #36	@ 0x24
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 ffbf 	bl	8002b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	@ 0x30
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d156      	bne.n	8001cac <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_UART_Transmit_DMA+0x26>
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e04f      	b.n	8001cae <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	88fa      	ldrh	r2, [r7, #6]
 8001c18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	88fa      	ldrh	r2, [r7, #6]
 8001c1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2221      	movs	r2, #33	@ 0x21
 8001c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c32:	4a21      	ldr	r2, [pc, #132]	@ (8001cb8 <HAL_UART_Transmit_DMA+0xd4>)
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3a:	4a20      	ldr	r2, [pc, #128]	@ (8001cbc <HAL_UART_Transmit_DMA+0xd8>)
 8001c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c42:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <HAL_UART_Transmit_DMA+0xdc>)
 8001c44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c5a:	6819      	ldr	r1, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3304      	adds	r3, #4
 8001c62:	461a      	mov	r2, r3
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	f7fe ff57 	bl	8000b18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3314      	adds	r3, #20
 8001c7a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	e853 3f00 	ldrex	r3, [r3]
 8001c82:	617b      	str	r3, [r7, #20]
   return(result);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3314      	adds	r3, #20
 8001c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c94:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c96:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c98:	6a39      	ldr	r1, [r7, #32]
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9c:	e841 2300 	strex	r3, r2, [r1]
 8001ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e5      	bne.n	8001c74 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e000      	b.n	8001cae <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001cac:	2302      	movs	r3, #2
  }
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3730      	adds	r7, #48	@ 0x30
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	080023a1 	.word	0x080023a1
 8001cbc:	0800243b 	.word	0x0800243b
 8001cc0:	080025bf 	.word	0x080025bf

08001cc4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	d112      	bne.n	8001d04 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_UART_Receive_DMA+0x26>
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00b      	b.n	8001d06 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fcaa 	bl	8002654 <UART_Start_Receive_DMA>
 8001d00:	4603      	mov	r3, r0
 8001d02:	e000      	b.n	8001d06 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
  }
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b090      	sub	sp, #64	@ 0x40
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b21      	cmp	r3, #33	@ 0x21
 8001d3a:	d128      	bne.n	8001d8e <HAL_UART_DMAStop+0x80>
 8001d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d025      	beq.n	8001d8e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3314      	adds	r3, #20
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	e853 3f00 	ldrex	r3, [r3]
 8001d50:	623b      	str	r3, [r7, #32]
   return(result);
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3314      	adds	r3, #20
 8001d60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d62:	633a      	str	r2, [r7, #48]	@ 0x30
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d6a:	e841 2300 	strex	r3, r2, [r1]
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1e5      	bne.n	8001d42 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d004      	beq.n	8001d88 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe ff28 	bl	8000bd8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fcfd 	bl	8002788 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf14      	ite	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	2300      	moveq	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b22      	cmp	r3, #34	@ 0x22
 8001dae:	d128      	bne.n	8001e02 <HAL_UART_DMAStop+0xf4>
 8001db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d025      	beq.n	8001e02 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3314      	adds	r3, #20
 8001dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	e853 3f00 	ldrex	r3, [r3]
 8001dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3314      	adds	r3, #20
 8001dd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dd6:	61fa      	str	r2, [r7, #28]
 8001dd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	e841 2300 	strex	r3, r2, [r1]
 8001de2:	617b      	str	r3, [r7, #20]
   return(result);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1e5      	bne.n	8001db6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe feee 	bl	8000bd8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fcea 	bl	80027d6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3740      	adds	r7, #64	@ 0x40
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0ba      	sub	sp, #232	@ 0xe8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <HAL_UART_IRQHandler+0x66>
 8001e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fd90 	bl	8002990 <UART_Receive_IT>
      return;
 8001e70:	e25b      	b.n	800232a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80de 	beq.w	8002038 <HAL_UART_IRQHandler+0x22c>
 8001e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80d1 	beq.w	8002038 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_UART_IRQHandler+0xae>
 8001ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_UART_IRQHandler+0xd2>
 8001ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	f043 0202 	orr.w	r2, r3, #2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_UART_IRQHandler+0xf6>
 8001eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	f043 0204 	orr.w	r2, r3, #4
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d011      	beq.n	8001f32 <HAL_UART_IRQHandler+0x126>
 8001f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d105      	bne.n	8001f26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	f043 0208 	orr.w	r2, r3, #8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 81f2 	beq.w	8002320 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_UART_IRQHandler+0x14e>
 8001f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fd1b 	bl	8002990 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <HAL_UART_IRQHandler+0x17a>
 8001f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d04f      	beq.n	8002026 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fc25 	bl	80027d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d041      	beq.n	800201e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3314      	adds	r3, #20
 8001fa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fa8:	e853 3f00 	ldrex	r3, [r3]
 8001fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3314      	adds	r3, #20
 8001fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001fd6:	e841 2300 	strex	r3, r2, [r1]
 8001fda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1d9      	bne.n	8001f9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d013      	beq.n	8002016 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80021ec <HAL_UART_IRQHandler+0x3e0>)
 8001ff4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe28 	bl	8000c50 <HAL_DMA_Abort_IT>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002010:	4610      	mov	r0, r2
 8002012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002014:	e00e      	b.n	8002034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f9ae 	bl	8002378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800201c:	e00a      	b.n	8002034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f9aa 	bl	8002378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002024:	e006      	b.n	8002034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f9a6 	bl	8002378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002032:	e175      	b.n	8002320 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002034:	bf00      	nop
    return;
 8002036:	e173      	b.n	8002320 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	2b01      	cmp	r3, #1
 800203e:	f040 814f 	bne.w	80022e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8148 	beq.w	80022e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8141 	beq.w	80022e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80b6 	beq.w	80021f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002090:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 8145 	beq.w	8002324 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800209e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80020a2:	429a      	cmp	r2, r3
 80020a4:	f080 813e 	bcs.w	8002324 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80020ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	f000 8088 	beq.w	80021cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	330c      	adds	r3, #12
 80020c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020ca:	e853 3f00 	ldrex	r3, [r3]
 80020ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80020d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	330c      	adds	r3, #12
 80020e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80020e8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80020ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80020f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020f8:	e841 2300 	strex	r3, r2, [r1]
 80020fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002100:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1d9      	bne.n	80020bc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3314      	adds	r3, #20
 800210e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002110:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002112:	e853 3f00 	ldrex	r3, [r3]
 8002116:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002118:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3314      	adds	r3, #20
 8002128:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800212c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002130:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002132:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002134:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002138:	e841 2300 	strex	r3, r2, [r1]
 800213c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800213e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e1      	bne.n	8002108 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3314      	adds	r3, #20
 800214a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800214e:	e853 3f00 	ldrex	r3, [r3]
 8002152:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002156:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800215a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3314      	adds	r3, #20
 8002164:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002168:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800216a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800216e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002170:	e841 2300 	strex	r3, r2, [r1]
 8002174:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002176:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e3      	bne.n	8002144 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	330c      	adds	r3, #12
 8002190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002194:	e853 3f00 	ldrex	r3, [r3]
 8002198:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800219a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800219c:	f023 0310 	bic.w	r3, r3, #16
 80021a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	330c      	adds	r3, #12
 80021aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80021ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 80021b0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021b6:	e841 2300 	strex	r3, r2, [r1]
 80021ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80021bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1e3      	bne.n	800218a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fd06 	bl	8000bd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021da:	b29b      	uxth	r3, r3
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f8d1 	bl	800238a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021e8:	e09c      	b.n	8002324 <HAL_UART_IRQHandler+0x518>
 80021ea:	bf00      	nop
 80021ec:	0800289b 	.word	0x0800289b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 808e 	beq.w	8002328 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800220c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8089 	beq.w	8002328 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	330c      	adds	r3, #12
 800221c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800222c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	330c      	adds	r3, #12
 8002236:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800223a:	647a      	str	r2, [r7, #68]	@ 0x44
 800223c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002240:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002242:	e841 2300 	strex	r3, r2, [r1]
 8002246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1e3      	bne.n	8002216 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3314      	adds	r3, #20
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	e853 3f00 	ldrex	r3, [r3]
 800225c:	623b      	str	r3, [r7, #32]
   return(result);
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3314      	adds	r3, #20
 800226e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002272:	633a      	str	r2, [r7, #48]	@ 0x30
 8002274:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800227a:	e841 2300 	strex	r3, r2, [r1]
 800227e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1e3      	bne.n	800224e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	e853 3f00 	ldrex	r3, [r3]
 80022a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0310 	bic.w	r3, r3, #16
 80022aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	330c      	adds	r3, #12
 80022b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80022b8:	61fa      	str	r2, [r7, #28]
 80022ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022bc:	69b9      	ldr	r1, [r7, #24]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	e841 2300 	strex	r3, r2, [r1]
 80022c4:	617b      	str	r3, [r7, #20]
   return(result);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1e3      	bne.n	8002294 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f856 	bl	800238a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022de:	e023      	b.n	8002328 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <HAL_UART_IRQHandler+0x4f4>
 80022ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fae2 	bl	80028c2 <UART_Transmit_IT>
    return;
 80022fe:	e014      	b.n	800232a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <HAL_UART_IRQHandler+0x51e>
 800230c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fb21 	bl	8002960 <UART_EndTransmit_IT>
    return;
 800231e:	e004      	b.n	800232a <HAL_UART_IRQHandler+0x51e>
    return;
 8002320:	bf00      	nop
 8002322:	e002      	b.n	800232a <HAL_UART_IRQHandler+0x51e>
      return;
 8002324:	bf00      	nop
 8002326:	e000      	b.n	800232a <HAL_UART_IRQHandler+0x51e>
      return;
 8002328:	bf00      	nop
  }
}
 800232a:	37e8      	adds	r7, #232	@ 0xe8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b090      	sub	sp, #64	@ 0x40
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d137      	bne.n	800242c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80023bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023be:	2200      	movs	r2, #0
 80023c0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80023c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3314      	adds	r3, #20
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	e853 3f00 	ldrex	r3, [r3]
 80023d0:	623b      	str	r3, [r7, #32]
   return(result);
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3314      	adds	r3, #20
 80023e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80023e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ea:	e841 2300 	strex	r3, r2, [r1]
 80023ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80023f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1e5      	bne.n	80023c2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	330c      	adds	r3, #12
 80023fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	e853 3f00 	ldrex	r3, [r3]
 8002404:	60fb      	str	r3, [r7, #12]
   return(result);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800240c:	637b      	str	r3, [r7, #52]	@ 0x34
 800240e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
 8002414:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002416:	61fa      	str	r2, [r7, #28]
 8002418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241a:	69b9      	ldr	r1, [r7, #24]
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	e841 2300 	strex	r3, r2, [r1]
 8002422:	617b      	str	r3, [r7, #20]
   return(result);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e5      	bne.n	80023f6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800242a:	e002      	b.n	8002432 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800242c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800242e:	f7ff ff7f 	bl	8002330 <HAL_UART_TxCpltCallback>
}
 8002432:	bf00      	nop
 8002434:	3740      	adds	r7, #64	@ 0x40
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff ff7a 	bl	8002342 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b09c      	sub	sp, #112	@ 0x70
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b00      	cmp	r3, #0
 8002470:	d172      	bne.n	8002558 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002474:	2200      	movs	r2, #0
 8002476:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	330c      	adds	r3, #12
 800247e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002482:	e853 3f00 	ldrex	r3, [r3]
 8002486:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800248a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800248e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002498:	65ba      	str	r2, [r7, #88]	@ 0x58
 800249a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800249e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024a0:	e841 2300 	strex	r3, r2, [r1]
 80024a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80024a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e5      	bne.n	8002478 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3314      	adds	r3, #20
 80024b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b6:	e853 3f00 	ldrex	r3, [r3]
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80024bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80024c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3314      	adds	r3, #20
 80024ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80024cc:	647a      	str	r2, [r7, #68]	@ 0x44
 80024ce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024d4:	e841 2300 	strex	r3, r2, [r1]
 80024d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e5      	bne.n	80024ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3314      	adds	r3, #20
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	e853 3f00 	ldrex	r3, [r3]
 80024ee:	623b      	str	r3, [r7, #32]
   return(result);
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80024f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3314      	adds	r3, #20
 80024fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002500:	633a      	str	r2, [r7, #48]	@ 0x30
 8002502:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002504:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002508:	e841 2300 	strex	r3, r2, [r1]
 800250c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800250e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e5      	bne.n	80024e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800251c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	2b01      	cmp	r3, #1
 8002522:	d119      	bne.n	8002558 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	330c      	adds	r3, #12
 800252a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	e853 3f00 	ldrex	r3, [r3]
 8002532:	60fb      	str	r3, [r7, #12]
   return(result);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0310 	bic.w	r3, r3, #16
 800253a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800253c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	330c      	adds	r3, #12
 8002542:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002544:	61fa      	str	r2, [r7, #28]
 8002546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002548:	69b9      	ldr	r1, [r7, #24]
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	e841 2300 	strex	r3, r2, [r1]
 8002550:	617b      	str	r3, [r7, #20]
   return(result);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e5      	bne.n	8002524 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800255a:	2200      	movs	r2, #0
 800255c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800255e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	2b01      	cmp	r3, #1
 8002564:	d106      	bne.n	8002574 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002568:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800256a:	4619      	mov	r1, r3
 800256c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800256e:	f7ff ff0c 	bl	800238a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002572:	e002      	b.n	800257a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002574:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002576:	f7ff feed 	bl	8002354 <HAL_UART_RxCpltCallback>
}
 800257a:	bf00      	nop
 800257c:	3770      	adds	r7, #112	@ 0x70
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	2b01      	cmp	r3, #1
 800259c:	d108      	bne.n	80025b0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff feee 	bl	800238a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025ae:	e002      	b.n	80025b6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7ff fed8 	bl	8002366 <HAL_UART_RxHalfCpltCallback>
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b21      	cmp	r3, #33	@ 0x21
 80025f0:	d108      	bne.n	8002604 <UART_DMAError+0x46>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2200      	movs	r2, #0
 80025fc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80025fe:	68b8      	ldr	r0, [r7, #8]
 8002600:	f000 f8c2 	bl	8002788 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf14      	ite	ne
 8002612:	2301      	movne	r3, #1
 8002614:	2300      	moveq	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b22      	cmp	r3, #34	@ 0x22
 8002624:	d108      	bne.n	8002638 <UART_DMAError+0x7a>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002632:	68b8      	ldr	r0, [r7, #8]
 8002634:	f000 f8cf 	bl	80027d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263c:	f043 0210 	orr.w	r2, r3, #16
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002644:	68b8      	ldr	r0, [r7, #8]
 8002646:	f7ff fe97 	bl	8002378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b098      	sub	sp, #96	@ 0x60
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	88fa      	ldrh	r2, [r7, #6]
 800266c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2222      	movs	r2, #34	@ 0x22
 8002678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002680:	4a3e      	ldr	r2, [pc, #248]	@ (800277c <UART_Start_Receive_DMA+0x128>)
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002688:	4a3d      	ldr	r2, [pc, #244]	@ (8002780 <UART_Start_Receive_DMA+0x12c>)
 800268a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	4a3c      	ldr	r2, [pc, #240]	@ (8002784 <UART_Start_Receive_DMA+0x130>)
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	2200      	movs	r2, #0
 800269a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3304      	adds	r3, #4
 80026ac:	4619      	mov	r1, r3
 80026ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	f7fe fa30 	bl	8000b18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d019      	beq.n	800270a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	330c      	adds	r3, #12
 80026dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026e0:	e853 3f00 	ldrex	r3, [r3]
 80026e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80026e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80026f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80026fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026fe:	e841 2300 	strex	r3, r2, [r1]
 8002702:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e5      	bne.n	80026d6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3314      	adds	r3, #20
 8002710:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800271a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	657b      	str	r3, [r7, #84]	@ 0x54
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800272a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800272c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e5      	bne.n	800270a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3314      	adds	r3, #20
 8002744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	e853 3f00 	ldrex	r3, [r3]
 800274c:	617b      	str	r3, [r7, #20]
   return(result);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002754:	653b      	str	r3, [r7, #80]	@ 0x50
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3314      	adds	r3, #20
 800275c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800275e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002762:	6a39      	ldr	r1, [r7, #32]
 8002764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	61fb      	str	r3, [r7, #28]
   return(result);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e5      	bne.n	800273e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3760      	adds	r7, #96	@ 0x60
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	08002457 	.word	0x08002457
 8002780:	08002583 	.word	0x08002583
 8002784:	080025bf 	.word	0x080025bf

08002788 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	@ 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	e853 3f00 	ldrex	r3, [r3]
 800279e:	60bb      	str	r3, [r7, #8]
   return(result);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	61ba      	str	r2, [r7, #24]
 80027b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b4:	6979      	ldr	r1, [r7, #20]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	e841 2300 	strex	r3, r2, [r1]
 80027bc:	613b      	str	r3, [r7, #16]
   return(result);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e5      	bne.n	8002790 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80027cc:	bf00      	nop
 80027ce:	3724      	adds	r7, #36	@ 0x24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b095      	sub	sp, #84	@ 0x54
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	330c      	adds	r3, #12
 80027e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e8:	e853 3f00 	ldrex	r3, [r3]
 80027ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8002800:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002802:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002804:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002806:	e841 2300 	strex	r3, r2, [r1]
 800280a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800280c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e5      	bne.n	80027de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3314      	adds	r3, #20
 8002818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	61fb      	str	r3, [r7, #28]
   return(result);
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3314      	adds	r3, #20
 8002830:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002832:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800283a:	e841 2300 	strex	r3, r2, [r1]
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1e5      	bne.n	8002812 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	2b01      	cmp	r3, #1
 800284c:	d119      	bne.n	8002882 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	60bb      	str	r3, [r7, #8]
   return(result);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f023 0310 	bic.w	r3, r3, #16
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800286e:	61ba      	str	r2, [r7, #24]
 8002870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6979      	ldr	r1, [r7, #20]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	613b      	str	r3, [r7, #16]
   return(result);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e5      	bne.n	800284e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002890:	bf00      	nop
 8002892:	3754      	adds	r7, #84	@ 0x54
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff fd5f 	bl	8002378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b21      	cmp	r3, #33	@ 0x21
 80028d4:	d13e      	bne.n	8002954 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028de:	d114      	bne.n	800290a <UART_Transmit_IT+0x48>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d110      	bne.n	800290a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	1c9a      	adds	r2, r3, #2
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	621a      	str	r2, [r3, #32]
 8002908:	e008      	b.n	800291c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	1c59      	adds	r1, r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6211      	str	r1, [r2, #32]
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29b      	uxth	r3, r3
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4619      	mov	r1, r3
 800292a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10f      	bne.n	8002950 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800293e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800294e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	e000      	b.n	8002956 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002954:	2302      	movs	r3, #2
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002976:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fcd5 	bl	8002330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	@ 0x30
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b22      	cmp	r3, #34	@ 0x22
 80029a2:	f040 80ae 	bne.w	8002b02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ae:	d117      	bne.n	80029e0 <UART_Receive_IT+0x50>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d113      	bne.n	80029e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d8:	1c9a      	adds	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80029de:	e026      	b.n	8002a2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f2:	d007      	beq.n	8002a04 <UART_Receive_IT+0x74>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <UART_Receive_IT+0x82>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e008      	b.n	8002a24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d15d      	bne.n	8002afe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0220 	bic.w	r2, r2, #32
 8002a50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d135      	bne.n	8002af4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	e853 3f00 	ldrex	r3, [r3]
 8002a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f023 0310 	bic.w	r3, r3, #16
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aae:	623a      	str	r2, [r7, #32]
 8002ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab2:	69f9      	ldr	r1, [r7, #28]
 8002ab4:	6a3a      	ldr	r2, [r7, #32]
 8002ab6:	e841 2300 	strex	r3, r2, [r1]
 8002aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1e5      	bne.n	8002a8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d10a      	bne.n	8002ae6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff fc4c 	bl	800238a <HAL_UARTEx_RxEventCallback>
 8002af2:	e002      	b.n	8002afa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fc2d 	bl	8002354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e002      	b.n	8002b04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3730      	adds	r7, #48	@ 0x30
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002b46:	f023 030c 	bic.w	r3, r3, #12
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	430b      	orrs	r3, r1
 8002b52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002c20 <UART_SetConfig+0x114>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d103      	bne.n	8002b7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b74:	f7fe ffb4 	bl	8001ae0 <HAL_RCC_GetPCLK2Freq>
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	e002      	b.n	8002b82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b7c:	f7fe ff9c 	bl	8001ab8 <HAL_RCC_GetPCLK1Freq>
 8002b80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	009a      	lsls	r2, r3, #2
 8002b8c:	441a      	add	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <UART_SetConfig+0x118>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	0119      	lsls	r1, r3, #4
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	009a      	lsls	r2, r3, #2
 8002bac:	441a      	add	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <UART_SetConfig+0x118>)
 8002bba:	fba3 0302 	umull	r0, r3, r3, r2
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2064      	movs	r0, #100	@ 0x64
 8002bc2:	fb00 f303 	mul.w	r3, r0, r3
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	3332      	adds	r3, #50	@ 0x32
 8002bcc:	4a15      	ldr	r2, [pc, #84]	@ (8002c24 <UART_SetConfig+0x118>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bd8:	4419      	add	r1, r3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009a      	lsls	r2, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <UART_SetConfig+0x118>)
 8002bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2064      	movs	r0, #100	@ 0x64
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	@ 0x32
 8002c04:	4a07      	ldr	r2, [pc, #28]	@ (8002c24 <UART_SetConfig+0x118>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	f003 020f 	and.w	r2, r3, #15
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	440a      	add	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40013800 	.word	0x40013800
 8002c24:	51eb851f 	.word	0x51eb851f

08002c28 <memset>:
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4402      	add	r2, r0
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d100      	bne.n	8002c32 <memset+0xa>
 8002c30:	4770      	bx	lr
 8002c32:	f803 1b01 	strb.w	r1, [r3], #1
 8002c36:	e7f9      	b.n	8002c2c <memset+0x4>

08002c38 <__libc_init_array>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	2600      	movs	r6, #0
 8002c3c:	4d0c      	ldr	r5, [pc, #48]	@ (8002c70 <__libc_init_array+0x38>)
 8002c3e:	4c0d      	ldr	r4, [pc, #52]	@ (8002c74 <__libc_init_array+0x3c>)
 8002c40:	1b64      	subs	r4, r4, r5
 8002c42:	10a4      	asrs	r4, r4, #2
 8002c44:	42a6      	cmp	r6, r4
 8002c46:	d109      	bne.n	8002c5c <__libc_init_array+0x24>
 8002c48:	f000 f81a 	bl	8002c80 <_init>
 8002c4c:	2600      	movs	r6, #0
 8002c4e:	4d0a      	ldr	r5, [pc, #40]	@ (8002c78 <__libc_init_array+0x40>)
 8002c50:	4c0a      	ldr	r4, [pc, #40]	@ (8002c7c <__libc_init_array+0x44>)
 8002c52:	1b64      	subs	r4, r4, r5
 8002c54:	10a4      	asrs	r4, r4, #2
 8002c56:	42a6      	cmp	r6, r4
 8002c58:	d105      	bne.n	8002c66 <__libc_init_array+0x2e>
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
 8002c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c60:	4798      	blx	r3
 8002c62:	3601      	adds	r6, #1
 8002c64:	e7ee      	b.n	8002c44 <__libc_init_array+0xc>
 8002c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6a:	4798      	blx	r3
 8002c6c:	3601      	adds	r6, #1
 8002c6e:	e7f2      	b.n	8002c56 <__libc_init_array+0x1e>
 8002c70:	08002cc4 	.word	0x08002cc4
 8002c74:	08002cc4 	.word	0x08002cc4
 8002c78:	08002cc4 	.word	0x08002cc4
 8002c7c:	08002cc8 	.word	0x08002cc8

08002c80 <_init>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	bf00      	nop
 8002c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c86:	bc08      	pop	{r3}
 8002c88:	469e      	mov	lr, r3
 8002c8a:	4770      	bx	lr

08002c8c <_fini>:
 8002c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8e:	bf00      	nop
 8002c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c92:	bc08      	pop	{r3}
 8002c94:	469e      	mov	lr, r3
 8002c96:	4770      	bx	lr
